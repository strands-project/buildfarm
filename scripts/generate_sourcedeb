#!/usr/bin/env python

from __future__ import print_function
import os
import subprocess
from subprocess import Popen, CalledProcessError
import sys


def parse_options():
    import argparse
    parser = argparse.ArgumentParser(description='Creates a set of source debs from a catkin gbp repo. Creates source debs from the latest upstream version.')
    parser.add_argument(dest='repo_uri',
                        help='A read-only git buildpackage repo uri.')
    parser.add_argument('package_name', help='The package name for the package we\'re building')
    parser.add_argument('rosdistro', help='Which rosdistro to operate on')
    parser.add_argument('short_package_name', help='The package name for the package we\'re building, w/o the debian extensions')
    parser.add_argument('--working', help='A scratch build path. Default: %(default)s', default='/tmp/catkin_gbp')
    parser.add_argument('--version', help='Set version to be build. If not set, read from  rosdistro info', default=None)
    parser.add_argument('--output', help='The result of source deb building will go here. Default: %(default)s', default='/tmp/catkin_debs')
    parser.add_argument('--repo-fqdn', dest='repo_fqdn', help='The fully qualified domain name of the repo machine. Default: %(default)s', default='repos.ros.org')
    parser.add_argument('--repo-path', dest='repo_path', help='The path to find the repo on the machine. Default: %(default)s', default='/var/www/repos/building')
    parser.add_argument('-n', dest='noupload', help='Do not try to upload', action='store_true', default=False)

    args = parser.parse_args()

    return args


def make_working(working_dir):
    if not os.path.exists(working_dir):
        os.makedirs(working_dir)


def call(working_dir, command, pipe=None):
    print('+ cd %s && ' % working_dir + ' '.join(command))
    process = Popen(command, stdout=pipe, stderr=pipe, cwd=working_dir)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        raise CalledProcessError(retcode, command)
    if pipe:
        return output


def check_local_repo_exists(repo_path):
    return os.path.exists(os.path.join(repo_path, '.git'))


def update_repo(working_dir, repo_path, repo_uri):
    if check_local_repo_exists(repo_path):
        print(repo_path)
        command = ('git', 'fetch', '--all')
        call(repo_path, command)
    else:
        command = ('gbp-clone', repo_uri)
        call(working_dir, command)


def verify_debian_tag(repo_path, package_name, package_version, distro):
    tags = call(repo_path, ('git', 'tag', '-l', 'debian/*'), pipe=subprocess.PIPE)

    expected_tag = 'debian/%s_%s_%s' % (package_name, package_version, distro)
    tag_list = tags.split('\n')

    if expected_tag in tag_list:
        return expected_tag
    else:
        print("No matching tag found. Are you sure you pointed to the right repository or the version is right?, expected %s:\n Tags: %s" % (expected_tag, tags))
    return None


def build_source_deb(repo_path, tag, output):
    call(repo_path, ('git', 'checkout', tag))
    call(repo_path, ('git', 'buildpackage', '--git-export-dir=%s' % output,
          '--git-ignore-branch', '--git-upstream-tree=tag',
         '--git-ignore-new', '-S', '-uc', '-us', '--lintian-opts', '--suppress-tags', 'newer-standards-version'))
    print("Successfully created changes in %s" % output)
    call(repo_path, ['ls', output])


def upload_source_deb(distros, repo_fqdn, repo_path, input_directory, packagename):
    upload_root = "/tmp/upload/%s" % packagename

    # clear the upload directory to make sure that there are not old files lying around
    cmd = ("ssh rosbuild@%s -- rm -rf %s" % (repo_fqdn, upload_root)).split()
    call('/tmp/', cmd)
    cmd = ("ssh rosbuild@%s -- mkdir -p %s" % (repo_fqdn, upload_root)).split()
    call('/tmp/', cmd)

    # Copy up the data
    for distro in distros:
        upload_source = os.path.join(input_directory, distro)
        cmd = ("scp -r %s rosbuild@%s:%s" % (upload_source, repo_fqdn, upload_root)).split()
        call('/tmp/', cmd)

    # list all the folders where data is expected in one operation
    folder_options = ' '.join(['-f %s' % os.path.join(upload_root, distro) for distro in distros])
    cmd = ("ssh rosbuild@%(repo_fqdn)s -- PYTHONPATH=/home/rosbuild/reprepro_updater/src python /home/rosbuild/reprepro_updater/scripts/include_folder.py -a source %(folder_options)s -p %(packagename)s -c --delete --invalidate" % locals()).split()
    call('/tmp/', cmd)


def find_file(directory, extension, substring=''):
    """ Return the first file in directory which has extension and contains the substring """
    files = os.listdir(directory)
    for f in files:
        if extension == os.path.splitext(f)[1] and substring in f:
            return f
    return None


if __name__ == "__main__":
    args = parse_options()
    make_working(args.working)

    if args.rosdistro != 'fuerte':
        from buildfarm.ros_distro import Rosdistro
    else:
        from buildfarm.ros_distro_fuerte import Rosdistro
    rd = Rosdistro(args.rosdistro)

    if args.version is None:
        package_version = rd.get_version(args.short_package_name, full_version=True)
    else:
        package_version = args.version
    print("package name", args.short_package_name, "version", package_version)

    repo_base, extension = os.path.splitext(os.path.basename(args.repo_uri))
    repo_path = os.path.join(args.working, repo_base)

    update_repo(working_dir=args.working, repo_path=repo_path, repo_uri=args.repo_uri)

    report_failure = False
    for d in rd.get_target_distros():

        tag = verify_debian_tag(repo_path, args.package_name, package_version, d)
        if not tag:
            print("No tag; bailing")
            report_failure = True
            continue

        output_dir = os.path.join(args.output, d)
        os.makedirs(output_dir)
        try:
            build_source_deb(repo_path, tag, output_dir)
            print("successfully created sourcedeb for tag %s on repo %s." % (tag, repo_path))
        except CalledProcessError as ex:
            print("Failed to build source deb for tag %s on repo %s: %s" % (tag, repo_path, ex))
            report_failure = True
            continue

    try:

        if args.noupload:
            print("Noupload argument passed, skipping upload of %s" % args.output)
        else:
            upload_source_deb(rd.get_target_distros(), args.repo_fqdn, args.repo_path,
                              args.output,
                              args.package_name
                              )
            print("Succeeded uploading for distro %s." % (d))
    except CalledProcessError as ex:
        print("Failed uploading for distro %s: %s" % (d, ex))
        report_failure = True

    if report_failure:
        print("Errors have occurred in the source build see above. ")
        sys.exit(1)
